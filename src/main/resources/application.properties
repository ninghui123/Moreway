## 数据源配置
spring.datasource.url=jdbc:mysql://localhost/test?characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull
spring.datasource.username=root
spring.datasource.password=nh123


## Mybatis 配置
mybatis.typeAliasesPackage=nh.beans
mybatis.mapperLocations=classpath:mapper/*.xml
spring.datasource.driverClassName=com.mysql.jdbc.Driver
#开启驼峰命名
mybatis.configuration.mapUnderscoreToCamelCase=true

#使用Druid数据源
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#连接池配置
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
#连接等待超时时间
spring.datasource.maxWait=60000
#配置隔多久进行一次检测(检测可以关闭的空闲连接)
spring.datasource.timeBetweenEvictionRunsMillis=60000
#配置连接在池中的最小生存时间
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000


## LOG4J配置
#log4j.rootCategory=INFO, stdout, file
#
## 控制台输出
#log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n
#
## root日志输出到文件
#log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.file.file=/data/logs/springboot-log4j-all.log
#log4j.appender.file.DatePattern='.'yyyy-MM-dd
#log4j.appender.file.layout=org.apache.log4j.PatternLayout
#log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n
#
## 按不同package进行输出
## com.micai包下的日志配置
#log4j.category.com.micai=DEBUG, didifile
#
## com.micai下的日志输出
#log4j.appender.didifile=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.didifile.file=/data/logs/springboot-log4j-my.log
#log4j.appender.didifile.DatePattern='.'yyyy-MM-dd
#log4j.appender.didifile.layout=org.apache.log4j.PatternLayout
#log4j.appender.didifile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L ---- %m%n
#
## ERROR级别输出到特定的日志文件中
#log4j.logger.error=errorfile
## error日志输出
#log4j.appender.errorfile=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.errorfile.file=/data/logs/springboot-log4j-error.log
#log4j.appender.errorfile.DatePattern='.'yyyy-MM-dd
#log4j.appender.errorfile.Threshold = ERROR
#log4j.appender.errorfile.layout=org.apache.log4j.PatternLayout
#log4j.appender.errorfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n
